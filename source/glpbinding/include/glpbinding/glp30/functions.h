#pragma once

#include <glpbinding/noglp.h>
#include <glpbinding/glp/functions.h>


namespace glp30
{

using glp::glActiveTexture;
using glp::glAttachShader;
using glp::glBeginQuery;
using glp::glBeginTransformFeedback;
using glp::glBindAttribLocation;
using glp::glBindBuffer;
using glp::glBindBufferBase;
using glp::glBindBufferRange;
using glp::glBindFramebuffer;
using glp::glBindRenderbuffer;
using glp::glBindSampler;
using glp::glBindTexture;
using glp::glBindTransformFeedback;
using glp::glBindVertexArray;
using glp::glBlendColor;
using glp::glBlendEquation;
using glp::glBlendEquationSeparate;
using glp::glBlendFunc;
using glp::glBlendFuncSeparate;
using glp::glBlitFramebuffer;
using glp::glBufferData;
using glp::glBufferSubData;
using glp::glCheckFramebufferStatus;
using glp::glClear;
using glp::glClearBufferfi;
using glp::glClearBufferfv;
using glp::glClearBufferiv;
using glp::glClearBufferuiv;
using glp::glClearColor;
using glp::glClearDepthf;
using glp::glClearStencil;
using glp::glClientWaitSync;
using glp::glColorMask;
using glp::glCompileShader;
using glp::glCompressedTexImage2D;
using glp::glCompressedTexImage3D;
using glp::glCompressedTexSubImage2D;
using glp::glCompressedTexSubImage3D;
using glp::glCopyBufferSubData;
using glp::glCopyTexImage2D;
using glp::glCopyTexSubImage2D;
using glp::glCopyTexSubImage3D;
using glp::glCreateProgram;
using glp::glCreateShader;
using glp::glCullFace;
using glp::glDeleteBuffers;
using glp::glDeleteFramebuffers;
using glp::glDeleteProgram;
using glp::glDeleteQueries;
using glp::glDeleteRenderbuffers;
using glp::glDeleteSamplers;
using glp::glDeleteShader;
using glp::glDeleteSync;
using glp::glDeleteTextures;
using glp::glDeleteTransformFeedbacks;
using glp::glDeleteVertexArrays;
using glp::glDepthFunc;
using glp::glDepthMask;
using glp::glDepthRangef;
using glp::glDetachShader;
using glp::glDisable;
using glp::glDisableVertexAttribArray;
using glp::glDrawArrays;
using glp::glDrawArraysInstanced;
using glp::glDrawBuffers;
using glp::glDrawElements;
using glp::glDrawElementsInstanced;
using glp::glDrawRangeElements;
using glp::glEnable;
using glp::glEnableVertexAttribArray;
using glp::glEndQuery;
using glp::glEndTransformFeedback;
using glp::glFenceSync;
using glp::glFinish;
using glp::glFlush;
using glp::glFlushMappedBufferRange;
using glp::glFramebufferRenderbuffer;
using glp::glFramebufferTexture2D;
using glp::glFramebufferTextureLayer;
using glp::glFrontFace;
using glp::glGenBuffers;
using glp::glGenFramebuffers;
using glp::glGenQueries;
using glp::glGenRenderbuffers;
using glp::glGenSamplers;
using glp::glGenTextures;
using glp::glGenTransformFeedbacks;
using glp::glGenVertexArrays;
using glp::glGenerateMipmap;
using glp::glGetActiveAttrib;
using glp::glGetActiveUniform;
using glp::glGetActiveUniformBlockName;
using glp::glGetActiveUniformBlockiv;
using glp::glGetActiveUniformsiv;
using glp::glGetAttachedShaders;
using glp::glGetAttribLocation;
using glp::glGetBooleanv;
using glp::glGetBufferParameteri64v;
using glp::glGetBufferParameteriv;
using glp::glGetBufferPointerv;
using glp::glGetError;
using glp::glGetFloatv;
using glp::glGetFragDataLocation;
using glp::glGetFramebufferAttachmentParameteriv;
using glp::glGetInteger64i_v;
using glp::glGetInteger64v;
using glp::glGetIntegeri_v;
using glp::glGetIntegerv;
using glp::glGetInternalformativ;
using glp::glGetProgramBinary;
using glp::glGetProgramInfoLog;
using glp::glGetProgramiv;
using glp::glGetQueryObjectuiv;
using glp::glGetQueryiv;
using glp::glGetRenderbufferParameteriv;
using glp::glGetSamplerParameterfv;
using glp::glGetSamplerParameteriv;
using glp::glGetShaderInfoLog;
using glp::glGetShaderPrecisionFormat;
using glp::glGetShaderSource;
using glp::glGetShaderiv;
using glp::glGetString;
using glp::glGetStringi;
using glp::glGetSynciv;
using glp::glGetTexParameterfv;
using glp::glGetTexParameteriv;
using glp::glGetTransformFeedbackVarying;
using glp::glGetUniformBlockIndex;
using glp::glGetUniformIndices;
using glp::glGetUniformLocation;
using glp::glGetUniformfv;
using glp::glGetUniformiv;
using glp::glGetUniformuiv;
using glp::glGetVertexAttribIiv;
using glp::glGetVertexAttribIuiv;
using glp::glGetVertexAttribPointerv;
using glp::glGetVertexAttribfv;
using glp::glGetVertexAttribiv;
using glp::glHint;
using glp::glInvalidateFramebuffer;
using glp::glInvalidateSubFramebuffer;
using glp::glIsBuffer;
using glp::glIsEnabled;
using glp::glIsFramebuffer;
using glp::glIsProgram;
using glp::glIsQuery;
using glp::glIsRenderbuffer;
using glp::glIsSampler;
using glp::glIsShader;
using glp::glIsSync;
using glp::glIsTexture;
using glp::glIsTransformFeedback;
using glp::glIsVertexArray;
using glp::glLineWidth;
using glp::glLinkProgram;
using glp::glMapBufferRange;
using glp::glPauseTransformFeedback;
using glp::glPixelStorei;
using glp::glPolygonOffset;
using glp::glProgramBinary;
using glp::glProgramParameteri;
using glp::glReadBuffer;
using glp::glReadPixels;
using glp::glReleaseShaderCompiler;
using glp::glRenderbufferStorage;
using glp::glRenderbufferStorageMultisample;
using glp::glResumeTransformFeedback;
using glp::glSampleCoverage;
using glp::glSamplerParameterf;
using glp::glSamplerParameterfv;
using glp::glSamplerParameteri;
using glp::glSamplerParameteriv;
using glp::glScissor;
using glp::glShaderBinary;
using glp::glShaderSource;
using glp::glStencilFunc;
using glp::glStencilFuncSeparate;
using glp::glStencilMask;
using glp::glStencilMaskSeparate;
using glp::glStencilOp;
using glp::glStencilOpSeparate;
using glp::glTexImage2D;
using glp::glTexImage3D;
using glp::glTexParameterf;
using glp::glTexParameterfv;
using glp::glTexParameteri;
using glp::glTexParameteriv;
using glp::glTexStorage2D;
using glp::glTexStorage3D;
using glp::glTexSubImage2D;
using glp::glTexSubImage3D;
using glp::glTransformFeedbackVaryings;
using glp::glUniform1f;
using glp::glUniform1fv;
using glp::glUniform1i;
using glp::glUniform1iv;
using glp::glUniform1ui;
using glp::glUniform1uiv;
using glp::glUniform2f;
using glp::glUniform2fv;
using glp::glUniform2i;
using glp::glUniform2iv;
using glp::glUniform2ui;
using glp::glUniform2uiv;
using glp::glUniform3f;
using glp::glUniform3fv;
using glp::glUniform3i;
using glp::glUniform3iv;
using glp::glUniform3ui;
using glp::glUniform3uiv;
using glp::glUniform4f;
using glp::glUniform4fv;
using glp::glUniform4i;
using glp::glUniform4iv;
using glp::glUniform4ui;
using glp::glUniform4uiv;
using glp::glUniformBlockBinding;
using glp::glUniformMatrix2fv;
using glp::glUniformMatrix2x3fv;
using glp::glUniformMatrix2x4fv;
using glp::glUniformMatrix3fv;
using glp::glUniformMatrix3x2fv;
using glp::glUniformMatrix3x4fv;
using glp::glUniformMatrix4fv;
using glp::glUniformMatrix4x2fv;
using glp::glUniformMatrix4x3fv;
using glp::glUnmapBuffer;
using glp::glUseProgram;
using glp::glValidateProgram;
using glp::glVertexAttrib1f;
using glp::glVertexAttrib1fv;
using glp::glVertexAttrib2f;
using glp::glVertexAttrib2fv;
using glp::glVertexAttrib3f;
using glp::glVertexAttrib3fv;
using glp::glVertexAttrib4f;
using glp::glVertexAttrib4fv;
using glp::glVertexAttribDivisor;
using glp::glVertexAttribI4i;
using glp::glVertexAttribI4iv;
using glp::glVertexAttribI4ui;
using glp::glVertexAttribI4uiv;
using glp::glVertexAttribIPointer;
using glp::glVertexAttribPointer;
using glp::glViewport;
using glp::glWaitSync;

} // namespace glp30
