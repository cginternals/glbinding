#pragma once

#include <glpbinding/noglp.h>
#include <glpbinding/glp/functions.h>


namespace glp20
{

using glp::glActiveTexture;
using glp::glAttachShader;
using glp::glBindAttribLocation;
using glp::glBindBuffer;
using glp::glBindFramebuffer;
using glp::glBindRenderbuffer;
using glp::glBindTexture;
using glp::glBlendColor;
using glp::glBlendEquation;
using glp::glBlendEquationSeparate;
using glp::glBlendFunc;
using glp::glBlendFuncSeparate;
using glp::glBufferData;
using glp::glBufferSubData;
using glp::glCheckFramebufferStatus;
using glp::glClear;
using glp::glClearColor;
using glp::glClearDepthf;
using glp::glClearStencil;
using glp::glColorMask;
using glp::glCompileShader;
using glp::glCompressedTexImage2D;
using glp::glCompressedTexSubImage2D;
using glp::glCopyTexImage2D;
using glp::glCopyTexSubImage2D;
using glp::glCreateProgram;
using glp::glCreateShader;
using glp::glCullFace;
using glp::glDeleteBuffers;
using glp::glDeleteFramebuffers;
using glp::glDeleteProgram;
using glp::glDeleteRenderbuffers;
using glp::glDeleteShader;
using glp::glDeleteTextures;
using glp::glDepthFunc;
using glp::glDepthMask;
using glp::glDepthRangef;
using glp::glDetachShader;
using glp::glDisable;
using glp::glDisableVertexAttribArray;
using glp::glDrawArrays;
using glp::glDrawElements;
using glp::glEnable;
using glp::glEnableVertexAttribArray;
using glp::glFinish;
using glp::glFlush;
using glp::glFramebufferRenderbuffer;
using glp::glFramebufferTexture2D;
using glp::glFrontFace;
using glp::glGenBuffers;
using glp::glGenFramebuffers;
using glp::glGenRenderbuffers;
using glp::glGenTextures;
using glp::glGenerateMipmap;
using glp::glGetActiveAttrib;
using glp::glGetActiveUniform;
using glp::glGetAttachedShaders;
using glp::glGetAttribLocation;
using glp::glGetBooleanv;
using glp::glGetBufferParameteriv;
using glp::glGetError;
using glp::glGetFloatv;
using glp::glGetFramebufferAttachmentParameteriv;
using glp::glGetIntegerv;
using glp::glGetProgramInfoLog;
using glp::glGetProgramiv;
using glp::glGetRenderbufferParameteriv;
using glp::glGetShaderInfoLog;
using glp::glGetShaderPrecisionFormat;
using glp::glGetShaderSource;
using glp::glGetShaderiv;
using glp::glGetString;
using glp::glGetTexParameterfv;
using glp::glGetTexParameteriv;
using glp::glGetUniformLocation;
using glp::glGetUniformfv;
using glp::glGetUniformiv;
using glp::glGetVertexAttribPointerv;
using glp::glGetVertexAttribfv;
using glp::glGetVertexAttribiv;
using glp::glHint;
using glp::glIsBuffer;
using glp::glIsEnabled;
using glp::glIsFramebuffer;
using glp::glIsProgram;
using glp::glIsRenderbuffer;
using glp::glIsShader;
using glp::glIsTexture;
using glp::glLineWidth;
using glp::glLinkProgram;
using glp::glPixelStorei;
using glp::glPolygonOffset;
using glp::glReadPixels;
using glp::glReleaseShaderCompiler;
using glp::glRenderbufferStorage;
using glp::glSampleCoverage;
using glp::glScissor;
using glp::glShaderBinary;
using glp::glShaderSource;
using glp::glStencilFunc;
using glp::glStencilFuncSeparate;
using glp::glStencilMask;
using glp::glStencilMaskSeparate;
using glp::glStencilOp;
using glp::glStencilOpSeparate;
using glp::glTexImage2D;
using glp::glTexParameterf;
using glp::glTexParameterfv;
using glp::glTexParameteri;
using glp::glTexParameteriv;
using glp::glTexSubImage2D;
using glp::glUniform1f;
using glp::glUniform1fv;
using glp::glUniform1i;
using glp::glUniform1iv;
using glp::glUniform2f;
using glp::glUniform2fv;
using glp::glUniform2i;
using glp::glUniform2iv;
using glp::glUniform3f;
using glp::glUniform3fv;
using glp::glUniform3i;
using glp::glUniform3iv;
using glp::glUniform4f;
using glp::glUniform4fv;
using glp::glUniform4i;
using glp::glUniform4iv;
using glp::glUniformMatrix2fv;
using glp::glUniformMatrix3fv;
using glp::glUniformMatrix4fv;
using glp::glUseProgram;
using glp::glValidateProgram;
using glp::glVertexAttrib1f;
using glp::glVertexAttrib1fv;
using glp::glVertexAttrib2f;
using glp::glVertexAttrib2fv;
using glp::glVertexAttrib3f;
using glp::glVertexAttrib3fv;
using glp::glVertexAttrib4f;
using glp::glVertexAttrib4fv;
using glp::glVertexAttribPointer;
using glp::glViewport;

} // namespace glp20
