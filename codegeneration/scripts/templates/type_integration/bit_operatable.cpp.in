namespace %a
{

%t operator|(const %t & a, const %t & b)
{
    return static_cast<%t>(static_cast<std::underlying_type<%t>::type>(a) | static_cast<std::underlying_type<%t>::type>(b));
}

%t & operator|=(%t & a, const %t & b)
{
    a = static_cast<%t>(static_cast<std::underlying_type<%t>::type>(a) | static_cast<std::underlying_type<%t>::type>(b));
    
    return a;
}

%t operator&(const %t & a, const %t & b)
{
    return static_cast<%t>(static_cast<std::underlying_type<%t>::type>(a) & static_cast<std::underlying_type<%t>::type>(b));
}

%t & operator&=(%t & a, const %t & b)
{
    a = static_cast<%t>(static_cast<std::underlying_type<%t>::type>(a) & static_cast<std::underlying_type<%t>::type>(b));
    
    return a;
}

%t operator^(const %t & a, const %t & b)
{
    return static_cast<%t>(static_cast<std::underlying_type<%t>::type>(a) ^ static_cast<std::underlying_type<%t>::type>(b));
}

%t & operator^=(%t & a, const %t & b)
{
    a = static_cast<%t>(static_cast<std::underlying_type<%t>::type>(a) ^ static_cast<std::underlying_type<%t>::type>(b));
    
    return a;
}

} // namespace %a