
namespace %a
{

%ABINDING_API bool operator==(const %t & a, std::underlying_type<%t>::type b);
%ABINDING_API bool operator!=(const %t & a, std::underlying_type<%t>::type b);
%ABINDING_API bool operator< (const %t & a, std::underlying_type<%t>::type b);
%ABINDING_API bool operator<=(const %t & a, std::underlying_type<%t>::type b);
%ABINDING_API bool operator> (const %t & a, std::underlying_type<%t>::type b);
%ABINDING_API bool operator>=(const %t & a, std::underlying_type<%t>::type b);

%ABINDING_API bool operator==(std::underlying_type<%t>::type a, const %t & b);
%ABINDING_API bool operator!=(std::underlying_type<%t>::type a, const %t & b);
%ABINDING_API bool operator< (std::underlying_type<%t>::type a, const %t & b);
%ABINDING_API bool operator<=(std::underlying_type<%t>::type a, const %t & b);
%ABINDING_API bool operator> (std::underlying_type<%t>::type a, const %t & b);
%ABINDING_API bool operator>=(std::underlying_type<%t>::type a, const %t & b);

} // namespace %a
